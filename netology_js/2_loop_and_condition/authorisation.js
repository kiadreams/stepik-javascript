const auth = function (cb) {
    setTimeout(cb, 3000, {authorized: true});
    /*
     * Необходимо реализовать функциональность, которая
     * позволит отложить выполнение переданной функции на определённое время.
     * Это позволит имитировать событие авторизации пользователя на веб-сайте, например.
     * В реальных условиях невозможно предсказать точный момент,
     * когда пользователь авторизуется на сайте или пройдёт авторизацию или нет. 
     * В свою очередь, остальная часть логики не сможет выполниться, 
     * пока не получит подтверждения об авторизации пользователя.
     * 
     * В момент вызова переданной функции cb в качестве параметров
     * необходимо передать объект { authorized: true }.
     */
};


// Ожидаем что функции getUserProfile и getUserSettings начнут свое исполнение через какое-то время
auth(subscribe);

function subscribe(data) {
    if (data && data.authorized) {
        getUserProfile();
        getUserSettings();
    }
};

function getUserProfile(count) {
    console.log("Получаем профиль пользователя");
}

function getUserSettings() {
    console.log("Получаем начтройки пользователя");
}


// // Ответ эксперта...!!!
// export const auth = function (cb) {
//     /*
//      * Для имитации непредсказуемости, в какой момент времени
//      * пользователь авторизуется на сайте, сгенерируем случайное
//      * число от 1 до 3, которое будем использовать для задержки
//      * выполнения переданной функции через секунды.
//      */
//     const randomSeconds = Math.floor(1 + Math.random() * 3);

//     /*
//      * Для того, чтобы отложить выполнение, используем
//      * стандартную функцию setTimeout отложенного исполнения
//      * по времени.
//      * 
//      * Как только истечёт время задержки, указанное для
//      * setTimeout, будет вызвана функция, в которую
//      * передан объект, имитирующий событие авторизации
//      * пользователя.
//      */
//     setTimeout(() => {
//         cb({ authorized: true });
//     }, randomSeconds * 1000);
// };