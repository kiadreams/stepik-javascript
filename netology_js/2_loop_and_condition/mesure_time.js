const trace = function (count) {
    /*
     * Как мы уже видели на предыдущих занятиях,
     * определённая реализация может занимать довольно
     * много времени в зависимости от входных параметров.
     * При использовании довольно больших значений
     * вообще может вызвать аварийную остановку.
     * Классическая реализация функции Фибоначчи подойдет
     * куда лучше других.
     */
    function fib(n) {
        return n <= 1 ? n : fib(n - 1) + fib(n - 2);
    }

    /*
     * C учётом описанного выше измените
     * исходный код так, чтобы замер производительности
     * функции Фибоначчи происходил в любом случае -
     * как в случае успешного выполнения, так и в случае аварийной
     * остановки.
     */
    const startTime = Date.now();

    let duration = 0;
    try {
        fib(count);
    } catch(error) {

    } finally {
        duration = Date.now() - startTime;
    }

    return duration;
};


let duration = trace(8);

console.log(`Время выполнения составило ${duration} милисекунд`); // Ожидаем что время выполнения будет не больше 10-ти ms

duration = trace(37);
console.log(`Время выполнения составило ${duration} милисекунд`); // Ожидаем что время выполнения будет не меньше 100-та ms

duration = trace(41);
console.log(`Время выполнения составило ${duration} милисекунд`); // Ожидаем что время выполнения будет больше секунды (1000 ms)

duration = trace(15000);
console.log(`Время выполнения составило ${duration} милисекунд`); // Ожидаем что время выполнения будет не больше 10-ти ms